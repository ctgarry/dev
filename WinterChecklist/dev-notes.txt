##########
# Let's take a pause here and think about our direction.
##########

    In the beginning there was darkness and then this conversation came along and tried to create a light that would be a lightweight WoW addon in LUA. There was success, and I saw that iterating on the addon created more success. But after a time you and I both saw that it was taking time to load the addon into the actual game and try it out.

    I'd like to set an expectation that IF we are to test the addon that you have so expertly guided thus far outside of the actual game, then I would like make a change in the LUA file (with your learned guidance) within VS CODE and then press a button to make a window pop up and approximate what the addon might look like in the actual game.  

    In other words, I'm not sure that any combination of VS Code, Docker and Wowless is giving that. Will it eventually? Do I need to be patient? Or am I relegated to only ever getting commandline confirmations that the addon is logically sound, but without other assurances?

    Answer: use Love2d to develop the user interface and use wowless to prove the LUA logic.

##########
# About Love2D
##########
    https://www.youtube.com/watch?v=kpxkQldiNPU
    https://www.love2d.org
    C:\Program Files\LOVE

    I like the idea of installing Love2D. You should know that I watched https://www.youtube.com/watch?v=kpxkQldiNPU and then went to https://www.love2d.org and installed it on my Windows 64 machine here.  

##########
# Environment
##########

    The path to the program is in C:\Program Files\LOVE  ...  

    My VS Code working addon folder is here: "D:\users\ctgarry\Dropbox\World of Warcraft\dev\WinterChecklist"

    My classic era addon folder visible to my game is here: "C:\Program Files (x86)\World of Warcraft\_classic_era_\Interface\AddOns"

    My retail addons folder is here: "C:\Program Files (x86)\World of Warcraft\_retail_\Interface\AddOns"

##########
#More direction
##########

    With that all in mind, now let's switch back to the VS Code interface and make sure that we can use the command palette to see whatever we have accomplished so far in Powershell. And then we'll get a path forward for testing UI elements in Love2d

    We've worked really hard getting wowless to work in a docker container and we've successfully used Powershell to run some commandline verifications. We've gotten far enough to see that Wowless is tripping on the heavy UI elements. 

    As mentioned, Now let's switch back to the VS Code interface and make sure that we can use the command palette to see whatever we have accomplished so far in Powershell. 

    For example, Wowless is installed in a container in Docker and was incredible difficult to configure all steps leading up to that install. The container appears to be running, as seen in VS Code, but if I open a Remote Window to the container with Reopen in Container, then I get a huge error from the devcontainer.json

##########
# How to run:
##########

Press Ctrl+Shift+P → Tasks: Run Task.

Pick either:

    Developer: Reload Window.

    Preview: Checklist (Love2D) → opens the UI window.

    Wowless: Copy addon into container → syncs your code to the container.

    Wowless: Run Classic Era or Wowless: Run Retail → runs headless checks and tails the last 100 log lines.

    Deploy: Classic Era AddOn / Deploy: Retail AddOn → copies into your live WoW AddOns folders.

Notes:

    The Love2D path matches your install: C:\Program Files\LOVE\love.exe.

    ${workspaceFolder} will be your repo path: D:\users\ctgarry\Dropbox\World of Warcraft\dev\WinterChecklist.

    Robocopy exits non-zero even when successful; the task treats exit codes ≤ 3 as success (that’s normal for robocopy).

##########
# Silence the devcontainer error (done)
##########

    Since we’re not using “Reopen in Container” anymore:

    Easiest: rename the folder .devcontainer → _devcontainer (VS Code will stop prompting).

    Or disable the “Dev Containers” extension for this workspace: Extensions panel → “Dev Containers” → gear → Disable (Workspace).

    You can re-enable it later if you want to revisit the container workflow.

##########
# Daily flow (recommended)
##########

    Edit your addon Lua in VS Code.

    Preview quickly: Tasks → Preview: Checklist (Love2D) (you’ll see layout changes instantly).

    Logic check (optional): Tasks → Wowless: Copy addon into container, then Run Classic Era (or Retail). Expect Blizzard UI errors in logs; that’s normal for Wowless and not about your addon unless your file shows up in the stack.

    Ship to the game: Tasks → Deploy: Classic Era AddOn (or Retail).

    Alt-tab to the game and /reload.

    That’s it—now you’ve got a fast visual loop (Love2D) plus quick CLI verification (Wowless) and one-click deploys to the real client.
